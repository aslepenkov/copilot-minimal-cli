name: Test PR and Comment Results

on:
  pull_request:
    branches: [ arch-refactor, master ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ arch-refactor, master]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        run_install: false
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
      
    - name: Run tests
      id: test
      run: |
        # Run tests and capture output
        pnpm test > test-output.txt 2>&1
        TEST_EXIT_CODE=$?
        
        # Save test results
        echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
        
        # Always exit with 0 to allow comment posting even if tests fail
        exit 0
        
    - name: Read test output
      id: test_output
      run: |
        if [ -f test-output.txt ]; then
          # Read the test output and prepare for GitHub output
          TEST_OUTPUT=$(cat test-output.txt | head -50)  # Limit to first 50 lines
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$TEST_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "content=No test output found" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment PR
      # if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testExitCode = '${{ steps.test.outputs.exit_code }}';
          const testOutput = `${{ steps.test_output.outputs.content }}`;
          
          const success = testExitCode === '0';
          const statusIcon = success ? '✅' : '❌';
          const statusText = success ? 'PASSED' : 'FAILED';
          
          const comment = `## ${statusIcon} Test Results - ${statusText}
          
          **Branch:** \`${{ github.head_ref || github.ref_name }}\`
          **Commit:** \`${{ github.sha }}\`
          
          ### Test Output
          <details>
          <summary>Click to view test details</summary>
          
          \`\`\`
          ${testOutput}
          \`\`\`
          </details>
          
          ---
          *Generated by GitHub Actions on ${new Date().toISOString()}*`;
          
          try {
            let prNumber = context.issue.number;
            console.log(`PR number from context: ${prNumber}`);
            
            // If no PR number from context, try to find PR for current branch
            if (!prNumber && github.event_name === 'push') {
              console.log('Push event detected, searching for PR associated with branch');
              const branch = '${{ github.ref_name }}';
              console.log(`Searching for PRs with head branch: ${branch}`);
              
              // Try different head formats since it could be a fork
              const headFormats = [
                `${context.repo.owner}:${branch}`,
                `${context.actor}:${branch}`,
                branch
              ];
              
              for (const head of headFormats) {
                console.log(`Trying head format: ${head}`);
                try {
                  const { data: pulls } = await github.rest.pulls.list({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    head: head,
                    state: 'open'
                  });
                  
                  if (pulls.length > 0) {
                    prNumber = pulls[0].number;
                    console.log(`Found PR #${prNumber} for head ${head}`);
                    break;
                  }
                } catch (err) {
                  console.log(`No PR found for head format: ${head}`);
                }
              }
              
              // If still no PR found, try searching by branch name only
              if (!prNumber) {
                console.log('Searching all open PRs to match by branch name');
                const { data: allPulls } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open'
                });
                
                const matchingPR = allPulls.find(pr => pr.head.ref === branch);
                if (matchingPR) {
                  prNumber = matchingPR.number;
                  console.log(`Found PR #${prNumber} by matching branch name ${branch}`);
                }
              }
              
              if (!prNumber) {
                console.log(`No open PR found for branch ${branch}, skipping comment`);
                return;
              }
            }
            
            if (!prNumber) {
              console.log('No PR number found, skipping comment');
              return;
            }
            
            console.log(`Commenting on PR #${prNumber}`);
            
            // Find existing comment from this workflow
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Test Results -')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              console.log('Created new comment');
            }
          } catch (error) {
            console.error('Error posting comment:', error);
            // Don't fail the job if commenting fails
          }
          
    - name: Fail job if tests failed
      if: steps.test.outputs.exit_code != '0'
      run: |
        echo "Tests failed with exit code ${{ steps.test.outputs.exit_code }}"
        exit 1
